{"version":3,"sources":["lib/arithmeticOperation.ts","lib/constants.ts","lib/CalcParser.ts","lib/calculateExpression.ts","lib/index.ts","components/CalcButton.tsx","components/Calculator.tsx","index.tsx"],"names":["arithmeticOperation","method","leftOperand","rightOperand","possibleOperations","add","subtract","divide","multiply","percentage","operations","Map","methods","entries","map","operationMethod","reverse","mathPriority","regexs","RegExp","keys","join","number","brackets","CalcParser","expression","_expression","this","priorityExpression","Object","reduce","acc","level","push","current","numbersRegex","source","operators","get","regex","replace","exp","initial","split","exprResult","match","Array","from","calculateExpression","finalExpression","inRecursion","removeSpace","priority","test","resolveExpression","expr","substr","withoutBrackets","slice","resolvedExpression","result","String","final","operator","operand","CalcButton","props","children","onClick","type","className","defaultProps","Calculator","useState","data","setExpression","setResult","setData","useCallback","newData","setExpressionWithResult","newExpression","operation","e","currentTarget","innerHTML","includes","addNumber","toAddNumber","equals","alternateSignal","clear","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.08cf1eaf.chunk.js","sourcesContent":["import type { Method } from './types';\n\nexport function arithmeticOperation(method: 'percentage', leftOperand: number): number;\nexport function arithmeticOperation(\n  method: Exclude<Method, 'percentage'>,\n  leftOperand: number,\n  rightOperand: number,\n): number;\nexport function arithmeticOperation(\n  method: Method,\n  leftOperand: number,\n  rightOperand?: number,\n): number;\nexport function arithmeticOperation(method: Method, leftOperand: number, rightOperand = 0) {\n  const possibleOperations: Record<Method, () => number> = {\n    add: () => leftOperand + rightOperand,\n    subtract: () => leftOperand - rightOperand,\n    divide: () => leftOperand / rightOperand,\n    multiply: () => leftOperand * rightOperand,\n    percentage: () => leftOperand / 100,\n  };\n\n  return possibleOperations[method]();\n}\nexport default arithmeticOperation;\n","import type { Operator, Method } from './types';\n\nexport const operations = new Map<Operator, Method>([\n  ['-', 'subtract'],\n  ['+', 'add'],\n  ['/', 'divide'],\n  ['x', 'multiply'],\n  ['%', 'percentage'],\n]);\n\nexport const methods = new Map<Method, Operator>([...operations.entries()]\n  .map((operationMethod) => operationMethod.reverse() as [Method, Operator]));\n\nexport const mathPriority: Record<Method, number> = {\n  add: 0,\n  subtract: 0,\n  percentage: 0,\n  divide: 1,\n  multiply: 1,\n};\n\nexport const regexs = {\n  operations: new RegExp(`[\\\\${[...operations.keys()].join('\\\\')}]`),\n  number: /[\\d.]/,\n  brackets: /[()]/,\n};\n","import { mathPriority, regexs, methods } from './constants';\n\nimport type { Method } from './types';\n\nexport class CalcParser {\n  private _expression: string;\n\n  constructor(expression: string) {\n    this._expression = expression;\n  }\n\n  public get expression() {\n    return this._expression;\n  }\n\n  public priority() {\n    const priorityLevels = Object.entries(mathPriority).reduce<Method[][]>(\n      (acc, [method, level]) => {\n        if (acc[level]) acc[level].push(method as Method);\n        else acc[level] = [method as Method];\n\n        return acc;\n      }, [],\n    ).reverse();\n\n    const priorityExpression = priorityLevels.reduce((acc, current) => {\n      const numbersRegex = `${regexs.number.source}+`;\n\n      const operators = current.map((method) => methods.get(method));\n      const regex = new RegExp(`(${numbersRegex}[${operators.join('\\\\')}])+${numbersRegex}`, 'g');\n\n      return acc.replace(regex, (exp) => `(${exp})`);\n    }, this.expression);\n\n    this._expression = priorityExpression;\n\n    return this;\n  }\n\n  public removeSpace() {\n    this._expression = this.expression.replace(/\\s/g, '');\n\n    return this;\n  }\n\n  public final(): string[] {\n    const initial = this._expression.split(regexs.operations)[0];\n    const exprResult = this.expression.match(new RegExp(\n      `(${regexs.operations.source}${regexs.number.source}*)`, 'g',\n    )) ?? [];\n\n    return [initial, ...Array.from(exprResult)];\n  }\n}\nexport default CalcParser;\n","import { arithmeticOperation } from './arithmeticOperation';\nimport { CalcParser } from './CalcParser';\nimport { operations, regexs } from './constants';\n\nimport type { Method, Operator } from './types';\n\nexport function calculateExpression(expression: string) {\n  let finalExpression = expression;\n\n  if (!calculateExpression.inRecursion) {\n    finalExpression = new CalcParser(finalExpression)\n      .removeSpace()\n      .priority()\n      .expression;\n  }\n\n  if (regexs.brackets.test(finalExpression)) {\n    const resolveExpression = (expr = expression): string => expr.replace(/\\(.*?\\)/g, (substr) => {\n      calculateExpression.inRecursion = true;\n      const withoutBrackets = substr.slice(1, -1);\n\n      let resolvedExpression = withoutBrackets;\n      if (regexs.brackets.test(withoutBrackets)) {\n        resolvedExpression = resolveExpression(resolvedExpression);\n      }\n\n      const result = calculateExpression(resolvedExpression);\n      return String(result);\n    });\n\n    finalExpression = resolveExpression();\n    calculateExpression.inRecursion = false;\n  }\n  const [initial, ...parsed] = new CalcParser(finalExpression).removeSpace().final();\n\n  return parsed.reduce<number>((acc, expr) => {\n    const [operator, ...operand] = expr;\n\n    const method = operations.get(operator as Operator);\n    if (!method) return 0;\n\n    return arithmeticOperation(\n      method as Method,\n      acc,\n      +operand.join(''),\n    );\n  }, +initial);\n}\ncalculateExpression.inRecursion = false;\nexport default calculateExpression;\n","export * from './calculateExpression';\nexport * from './types';\n","interface ButtonProps {\n  children: string;\n  onClick?: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\nexport const CalcButton = (props: ButtonProps) => {\n  const { children, onClick } = props;\n\n  return (\n    <button onClick={onClick} type=\"button\" className={`calc-button-${children}`}>{children}</button>\n  );\n};\nexport default CalcButton;\n\nCalcButton.defaultProps = {\n  onClick: () => null,\n};\n","import { useState, useCallback } from 'react';\n\nimport { CalcButton } from './CalcButton';\nimport { calculateExpression } from '../lib';\n\nimport './Calculator.css';\n\ninterface Data {\n  expression: string,\n  result: string,\n}\n\nexport function Calculator() {\n  const [data] = useState<Data>({\n    expression: '0',\n    result: '',\n  });\n  const [expression, setExpression] = useState(data.expression);\n  const [result, setResult] = useState(data.result);\n\n  const setData = useCallback((newData: Partial<Data>) => {\n    if (newData.expression) {\n      data.expression = newData.expression;\n      setExpression(newData.expression);\n    }\n\n    if (typeof newData.result !== 'undefined') {\n      data.result = newData.result;\n      setResult(newData.result);\n    }\n  }, []);\n\n  const setExpressionWithResult = useCallback((newExpression: string) => {\n    setData({\n      expression: newExpression,\n      result: String(calculateExpression(newExpression)),\n    });\n  }, []);\n\n  const operation = useCallback((e: React.MouseEvent) => {\n    const operator = e.currentTarget.innerHTML;\n    const newExpression = `${data.expression} ${operator} `;\n\n    if (['%'].includes(operator)) {\n      setExpressionWithResult(newExpression);\n    } else {\n      setData({ expression: newExpression });\n    }\n  }, []);\n\n  const addNumber = useCallback((e: React.MouseEvent) => {\n    const toAddNumber = e.currentTarget.innerHTML;\n\n    setExpressionWithResult(`${data.expression === '0' ? '' : data.expression}${toAddNumber}`);\n  }, []);\n\n  const equals = useCallback(() => {\n    setData({\n      expression: String(data.result),\n      result: '',\n    });\n  }, []);\n\n  const alternateSignal = useCallback(() => {\n    if (data.expression[0] === '-') {\n      setExpressionWithResult(data.expression.slice(1));\n    } else {\n      setExpressionWithResult(`-${data.expression}`);\n    }\n  }, []);\n\n  const clear = useCallback(() => {\n    setData({\n      expression: '0',\n      result: '',\n    });\n  }, []);\n\n  return (\n    <div className=\"calculator\">\n      <div className=\"calc-screen\">{expression}</div>\n      <div className=\"calc-screen\">{result}</div>\n      <CalcButton onClick={clear}>AC</CalcButton>\n      <CalcButton onClick={alternateSignal}>+/-</CalcButton>\n      <CalcButton onClick={operation}>%</CalcButton>\n      <CalcButton onClick={operation}>/</CalcButton>\n      <CalcButton onClick={addNumber}>7</CalcButton>\n      <CalcButton onClick={addNumber}>8</CalcButton>\n      <CalcButton onClick={addNumber}>9</CalcButton>\n      <CalcButton onClick={operation}>x</CalcButton>\n      <CalcButton onClick={addNumber}>4</CalcButton>\n      <CalcButton onClick={addNumber}>5</CalcButton>\n      <CalcButton onClick={addNumber}>6</CalcButton>\n      <CalcButton onClick={operation}>-</CalcButton>\n      <CalcButton onClick={addNumber}>1</CalcButton>\n      <CalcButton onClick={addNumber}>2</CalcButton>\n      <CalcButton onClick={addNumber}>3</CalcButton>\n      <CalcButton onClick={operation}>+</CalcButton>\n      <CalcButton onClick={addNumber}>0</CalcButton>\n      <CalcButton>.</CalcButton>\n      <CalcButton onClick={equals}>=</CalcButton>\n    </div>\n  );\n}\nexport default Calculator;\n","import ReactDOM from 'react-dom';\n\nimport { Calculator } from './components';\n\nReactDOM.render(\n  <Calculator />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}